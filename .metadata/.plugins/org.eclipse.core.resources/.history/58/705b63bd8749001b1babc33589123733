package com.ygj;

/**
 * 双向链表
 * 
 * @author glen
 *
 */
public class LinkedList<E> extends AbstractList<E> {
	private Node<E> first;
	private Node<E> last;

	private static class Node<E> {
		private E element;
		private Node<E> next;
		private Node<E> prev;

		public Node(Node<E> prev, E element, Node<E> next) {
			this.element = element;
			this.next = next;
			this.prev = prev;
		}
	}

	@Override
	public void add(int index, E element) {
		checkIndexForAdd(index);
//		if (index == 0) {
//			first = new Node<E>(element, first);
//		} else {
//			Node<E> preNode = nodeIndex(index - 1);
//			preNode.next = new Node<>(element, preNode.next);
//		}

		if (index == size) {
			Node<E> oldLast = last;
			last = new Node<>(oldLast, element, null);
			if (oldLast == null) {
				first = last;
			} else {
				oldLast.next = last;
			}
		} else {
			Node<E> node = nodeIndex(index);
			Node<E> preNode = node.prev;
			Node<E> newNode = new Node<>(preNode, element, node);
			if (index == 0) {
				first = newNode;
			} else {
				preNode.next = newNode;
			}
			node.prev = newNode;
		}
		size++;
	}

	/**
	 * 查找位置为index的元素
	 */
	private Node<E> nodeIndex(int index) {
		checkIndex(index);
		Node<E> node = first;
		if (index <= size >> 1) {
			for (int i = 0; i < index; i++) {
				node = node.next;
			}
		} else {
			node = last;
			for (int i = size - 1; i > index; i--) {
				node = node.prev;
			}
		}
		return node;
	}

	@Override
	public E get(int index) {
		Node<E> node = nodeIndex(index);
		return node.element;
	}

	@Override
	public E set(int index, E element) {
		Node<E> node = nodeIndex(index);
		E old = node.element;
		node.element = element;
		return old;
	}

	@Override
	public E remove(int index) {
		// 1 1 2
		checkIndex(index);
		Node<E> oldNode = first;
		if (index == 0) {
			first = first.next;
		} else {
			Node<E> preNode = nodeIndex(index - 1);
			oldNode = preNode.next;
			preNode.next = preNode.next.next;
		}
		size--;
		return oldNode.element;
	}

	@Override
	public int indexOf(E element) {
		if (element == null) {
			Node<E> node = first;
			for (int i = 0; i < size; i++) {
				if (node.element == null)
					return i;
				node = node.next;
			}
		} else {
			Node<E> node = first;
			for (int i = 0; i < size; i++) {
				if (element.equals(node.element))
					return i;
				node = node.next;
			}
		}
		return -1;
	}

	@Override
	public void clear() {
		first = null;
		last = null;
		size = 0;
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder();
		sb.append("size=" + size + " [");
		Node<E> node = first;
		for (int i = 0; i < size; i++) {
			sb.append(node.element);
			if (i != size - 1)
				sb.append(" , ");
			node = node.next;
		}
		sb.append("]");
		return sb.toString();
	}
}
