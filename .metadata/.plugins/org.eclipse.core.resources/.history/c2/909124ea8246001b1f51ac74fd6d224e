package com.ygj;

public class ArrayList<E> extends Abs{
	private int size;
	private E[] elements;
	private static final int DEFAULT_CAPACTITY = 10;

	public ArrayList() {
		this(DEFAULT_CAPACTITY);
	}

	public ArrayList(int capacity) {
		if (capacity <= DEFAULT_CAPACTITY)
			capacity = DEFAULT_CAPACTITY;
		elements = (E[]) new Object[capacity];
	}

	/**
	 * @return 返回数组中元素的个数
	 */
	public int size() {
		return size;
	}

	/**
	 * @return 数组是否为空
	 */
	public boolean isEmpty() {
		return size == 0;
	}

	/**
	 * @param element
	 * @return 是否包含元素element
	 */
	public boolean contains(E element) {
		return indexOf(element) != -1;
	}

	/**
	 * 添加元素
	 * 
	 * @param element
	 */
	public void add(E element) {
//		elements[size] = element;
//		size++;
		add(size, element);
	}

	/**
	 * 向指定位置添加元素
	 * 
	 * @param index
	 * @param element
	 */
	public void add(int index, E element) {
		checkIndexForAdd(index);
		ensureCapacity(size);
		for (int i = size - 1; i >= index; i--) {
			elements[i + 1] = elements[i];
		}
		elements[index] = element;
		size++;
	}

	/**
	 * 扩容
	 * 
	 * @param capactity
	 */
	private void ensureCapacity(int capactity) {
		if (capactity >= elements.length) {
			int newCapacity = capactity + (capactity >> 1);
			System.out.println("扩容 oldCapactity:" + elements.length + " newCapacity:" + newCapacity);
			E[] newElements = (E[]) new Object[newCapacity];
			for (int i = 0; i < size; i++) {
				newElements[i] = elements[i];
			}
			elements = newElements;
		}
	}

	private void checkIndexForAdd(int index) {
		if (index < 0 || index > size)
			throw new IndexOutOfBoundsException("index is " + index + " size is " + size);
	}

	private void checkIndex(int index) {
		if (index < 0 || index >= size)
			throw new IndexOutOfBoundsException("index is " + index + " size is " + size);
	}

	/**
	 * 获取指定位置的元素
	 * 
	 * @param index
	 * @return
	 */
	public E get(int index) {
		checkIndex(index);
		return elements[index];
	}

	/**
	 * 设置index位置的元素
	 * 
	 * @param index
	 * @param element
	 */
	public void set(int index, E element) {
		checkIndex(index);
		elements[index] = element;
	}

	/**
	 * 删除指定位置的元素
	 * 
	 * @param index
	 * @return
	 */
	public E remove(int index) {
		checkIndex(index);
		E oldE = elements[index];
		for (int i = index + 1; i < size; i++) {
			elements[i - 1] = elements[i];
		}
		// 如果数组中需要存入的数据类型为对象类型的，那么数组中存入的是对象的内存地址
		// 在删除元素时需要将元素向前移动，如果不将数组的最后一个元素置成null，那么它在
		// 下次被赋值之前都会一直引用这个对象，无法被垃圾回收。
		elements[size - 1] = null;
		size--;
		return oldE;
	}

	/**
	 * 删除元素
	 * 
	 * @param element
	 * @return
	 */
	public E remove(E element) {
		return remove(indexOf(element));
	}

	/**
	 * 返回指定元素的位置
	 * 
	 * @param element
	 * @return 返回-1，表示未找到元素
	 */
	public int indexOf(E element) {
		for (int i = 0; i < size; i++) {
			if (element == null) {
				if (elements[i] == null)
					return i;
			} else {
				if (element.equals(elements[i]))
					return i;
			}
		}
		return -1;
	}

	/**
	 * 清空元素
	 */
	public void clear() {
		for (E e : elements)
			e = null;
		size = 0;
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder();
		sb.append("size=" + size + " capactity=" + elements.length + "[");
		for (int i = 0; i < size; i++) {
			sb.append(elements[i]);
			if (i != size - 1)
				sb.append(",");
		}
		sb.append("]");
		return sb.toString();
	}
}
